#!/usr/bin/env python3
"""
Inicializador do Sistema de Gerenciamento de Elevadores
"""

import os
import sys
from pathlib import Path

def verificar_ambiente():
    """Verifica se o ambiente est√° configurado corretamente"""
    print("üîç Verificando ambiente...")
    
    # Verificar arquivo .env
    if not Path(".env").exists():
        print("‚ùå Arquivo .env n√£o encontrado!12")
        criar_env_exemplo()
        return False
    
    # Verificar se as depend√™ncias est√£o instaladas
    try:
        import flask
        import psycopg2
        from dotenv import load_dotenv
        print("‚úÖ Depend√™ncias encontradas!")
    except ImportError as e:
        print(f"‚ùå Depend√™ncia n√£o encontrada: {e}")
        print("üí° Execute: pip install -r requirements.txt")
        return False
    
    return True

def criar_env_exemplo():
    """Cria um arquivo .env de exemplo"""
    env_content = """# Configura√ß√µes do Banco de Dados PostgreSQL
PG_NAME=elevadores_db
PG_USER=postgres
PG_PASSWORD=sua_senha_aqui
PG_HOST=localhost
PG_PORT=5432

# Configura√ß√µes da Aplica√ß√£o
FLASK_ENV=development
FLASK_DEBUG=True
"""
    
    with open(".env", "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print("üìÑ Arquivo .env criado!")
    print("‚úèÔ∏è  Edite o arquivo .env com suas configura√ß√µes do PostgreSQL")

def testar_conexao_banco():
    """Testa a conex√£o com o banco de dados"""
    print("üóÑÔ∏è Testando conex√£o com o banco...")
    
    try:
        from postgre import create_pg_connection
        conn = create_pg_connection()
        
        if conn:
            print("‚úÖ Conex√£o com banco estabelecida!")
            conn.close()
            return True
        else:
            print("‚ùå Erro na conex√£o com o banco!")
            print("üí° Verifique as configura√ß√µes no arquivo .env")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao conectar com o banco: {e}")
        return False

def inicializar_banco():
    """Inicializa o banco de dados com as tabelas"""
    print("üèóÔ∏è Inicializando banco de dados...")
    
    try:
        from postgre import create_pg_connection, drop_all_tables, create_tables, end_pg_connection
        
        conn = create_pg_connection()
        if not conn:
            return False
        
        # Perguntar se quer recriar as tabelas
        resposta = input("‚ö†Ô∏è  Deseja recriar todas as tabelas? (isso apagar√° todos os dados) [s/N]: ")
        
        if resposta.lower() in ['s', 'sim', 'y', 'yes']:
            drop_all_tables(conn)
            create_tables(conn)
            print("‚úÖ Tabelas criadas com sucesso!")
            
            # Perguntar se quer dados de exemplo
            resposta = input("üìä Deseja adicionar dados de exemplo? [S/n]: ")
            
            if resposta.lower() not in ['n', 'no', 'n√£o']:
                adicionar_dados_exemplo(conn)
        
        end_pg_connection(conn)
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao inicializar banco: {e}")
        return False

def adicionar_dados_exemplo(conn):
    """Adiciona dados de exemplo ao banco"""
    cursor = conn.cursor()
    
    try:
        # Clientes
        cursor.execute("""
            INSERT INTO cliente (nome, comercial, documento, email) VALUES
            ('Jo√£o Silva Santos', 0, '12345678901', 'joao.silva@email.com'),
            ('Maria Oliveira Costa', 0, '98765432100', 'maria.oliveira@email.com'),
            ('Pedro Henrique Lima', 0, '11111111111', 'pedro.lima@email.com'),
            ('Ana Carolina Souza', 0, '22222222222', 'ana.souza@email.com')
            ON CONFLICT DO NOTHING;
        """)
        
        # Endere√ßos
        cursor.execute("""
            INSERT INTO endereco (id_cliente, rua, numero, cidade, estado, complemento, cep) VALUES
            (1, 'Rua das Flores', 123, 'S√£o Paulo', 'SP', 'Apto 101', '01234567'),
            (1, 'Av. Paulista', 456, 'S√£o Paulo', 'SP', 'Escrit√≥rio', '01310100'),
            (2, 'Av. Brasil', 789, 'Rio de Janeiro', 'RJ', NULL, '76543210'),
            (3, 'Rua Central', 321, 'Belo Horizonte', 'MG', 'Sala 201', '12345678'),
            (4, 'Av. Atl√¢ntica', 654, 'Rio de Janeiro', 'RJ', 'Cobertura', '87654321')
            ON CONFLICT DO NOTHING;
        """)
        
        # Cabines
        cursor.execute("""
            INSERT INTO cabine (altura) VALUES
            (220), (250), (280), (300), (350)
            ON CONFLICT DO NOTHING;
        """)
        
        # Contratos
        cursor.execute("""
            INSERT INTO contrato (data_venda, data_entrega, id_cliente) VALUES
            ('2024-01-15', '2024-12-15', 1),
            ('2024-02-20', '2024-11-20', 2),
            ('2024-03-10', '2025-01-10', 3),
            ('2024-04-05', '2025-02-05', 4),
            ('2024-05-01', '2024-10-01', 1)
            ON CONFLICT DO NOTHING;
        """)
        
        # Elevadores
        cursor.execute("""
            INSERT INTO elevador (id_contrato, id_cabine, elevacao, cor) VALUES
            (1, 1, 3000, 'Azul'),
            (2, 2, 3500, 'Vermelho'),
            (3, 3, 4000, 'Verde'),
            (4, 4, 2500, 'Amarelo'),
            (5, 5, 4500, 'Roxo')
            ON CONFLICT DO NOTHING;
        """)
        
        conn.commit()
        print("‚úÖ Dados de exemplo adicionados!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Alguns dados podem j√° existir: {e}")
    finally:
        cursor.close()

def executar_sistema():
    """Executa o sistema"""
    print("\nüöÄ Iniciando Sistema de Gerenciamento de Elevadores...")
    print("="*60)
    
    try:
        # Importar e executar a aplica√ß√£o
        from app import app
        app.run(debug=False, host='0.0.0.0', port=5000, use_reloader=False)
        
    except KeyboardInterrupt:
        print("\nüëã Sistema encerrado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao executar sistema: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üè¢ SISTEMA DE GERENCIAMENTO DE ELEVADORES")
    print("="*60)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("app.py").exists():
        print("‚ùå Arquivo app.py n√£o encontrado!")
        print("   Execute este script no diret√≥rio do projeto")
        return
    
    # Verificar ambiente
    if not verificar_ambiente():
        print("\nüí° Configure o ambiente e tente novamente")
        return
    
    # Testar conex√£o com banco
    if not testar_conexao_banco():
        print("\nüí° Configure o banco de dados e tente novamente")
        return
    
    # Menu de op√ß√µes
    while True:
        print(f"\nüìã Escolha uma op√ß√£o:")
        print("1. üöÄ Executar sistema")
        print("2. üèóÔ∏è  Configurar banco de dados")
        print("3. üìä Adicionar dados de exemplo")
        print("4. üîß Verificar ambiente")
        print("5. üëã Sair")
        
        escolha = input("\n‚û§ Digite sua escolha (1-5): ").strip()
        
        if escolha == "1":
            executar_sistema()
            break
        elif escolha == "2":
            inicializar_banco()
        elif escolha == "3":
            try:
                from postgre import create_pg_connection, end_pg_connection
                conn = create_pg_connection()
                if conn:
                    adicionar_dados_exemplo(conn)
                    end_pg_connection(conn)
            except Exception as e:
                print(f"‚ùå Erro: {e}")
        elif escolha == "4":
            verificar_ambiente()
            testar_conexao_banco()
        elif escolha == "5":
            print("üëã At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")

if __name__ == "__main__":
    main()
