@echo off
REM ============================================================================
REM HomeManager - Sistema de Gerenciamento de Elevadores
REM Instalador Completo para Windows
REM ============================================================================

setlocal enabledelayedexpansion
chcp 65001 >nul

REM Cores (usando c√≥digos ANSI)
set "RED=[31m"
set "GREEN=[32m"
set "YELLOW=[33m"
set "BLUE=[34m"
set "CYAN=[36m"
set "NC=[0m"

echo.
echo ====================================================
echo      HomeManager - Sistema de Elevadores
echo          Instalador para Windows
echo ====================================================
echo.

REM Obter diret√≥rio do projeto (2 n√≠veis acima do script)
set "SCRIPT_DIR=%~dp0"
for %%i in ("%SCRIPT_DIR%..") do set "PARENT_DIR=%%~fi"
for %%i in ("%PARENT_DIR%..") do set "PROJECT_DIR=%%~fi"

echo %CYAN%üìÅ Diret√≥rio do projeto: %PROJECT_DIR%%NC%
cd /d "%PROJECT_DIR%"

REM Verificar se Python est√° instalado
echo %YELLOW%üîç Verificando Python...%NC%
python --version >nul 2>&1
if %errorlevel% neq 0 (
    echo %RED%‚ùå Python n√£o encontrado!%NC%
    echo %YELLOW%üì• Baixando e instalando Python...%NC%
    
    REM Criar diret√≥rio tempor√°rio
    mkdir temp_installer 2>nul
    cd temp_installer
    
    REM Baixar Python (vers√£o est√°vel mais recente)
    echo %YELLOW%‚¨áÔ∏è  Baixando Python 3.11...%NC%
    powershell -Command "& {Invoke-WebRequest -Uri 'https://www.python.org/ftp/python/3.11.8/python-3.11.8-amd64.exe' -OutFile 'python-installer.exe'}"
    
    if not exist python-installer.exe (
        echo %RED%‚ùå Falha ao baixar Python!%NC%
        echo %YELLOW%Por favor, baixe e instale Python manualmente de python.org%NC%
        pause
        exit /b 1
    )
    
    REM Instalar Python silenciosamente
    echo %YELLOW%üì¶ Instalando Python...%NC%
    python-installer.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0
    
    REM Aguardar instala√ß√£o
    timeout /t 30 /nobreak >nul
    
    REM Limpar arquivos tempor√°rios
    cd ..
    rmdir /s /q temp_installer
    
    REM Reiniciar vari√°veis de ambiente
    call refreshenv.cmd 2>nul || echo %YELLOW%‚ö†Ô∏è  Reinicie o terminal ap√≥s a instala√ß√£o%NC%
    
    REM Verificar novamente
    python --version >nul 2>&1
    if !errorlevel! neq 0 (
        echo %RED%‚ùå Python ainda n√£o foi encontrado!%NC%
        echo %YELLOW%Reinicie o terminal e execute o instalador novamente%NC%
        pause
        exit /b 1
    )
) else (
    echo %GREEN%‚úÖ Python encontrado%NC%
    python --version
)

REM Verificar pip
echo %YELLOW%üîç Verificando pip...%NC%
python -m pip --version >nul 2>&1
if %errorlevel% neq 0 (
    echo %RED%‚ùå pip n√£o encontrado!%NC%
    echo %YELLOW%üì¶ Instalando pip...%NC%
    python -m ensurepip --upgrade
) else (
    echo %GREEN%‚úÖ pip encontrado%NC%
)

REM Criar ambiente virtual
echo %YELLOW%üîß Criando ambiente virtual...%NC%
if exist ".venv" (
    echo %YELLOW%‚ö†Ô∏è  Ambiente virtual j√° existe. Removendo...%NC%
    rmdir /s /q .venv
)

python -m venv .venv
if %errorlevel% neq 0 (
    echo %RED%‚ùå Falha ao criar ambiente virtual!%NC%
    pause
    exit /b 1
)
echo %GREEN%‚úÖ Ambiente virtual criado%NC%

REM Ativar ambiente virtual e instalar depend√™ncias
echo %YELLOW%üì¶ Instalando depend√™ncias...%NC%
call .venv\Scripts\activate.bat

REM Atualizar pip
python -m pip install --upgrade pip

REM Instalar depend√™ncias
if exist "requirements.txt" (
    pip install -r requirements.txt
    if !errorlevel! neq 0 (
        echo %RED%‚ùå Falha ao instalar depend√™ncias!%NC%
        pause
        exit /b 1
    )
    echo %GREEN%‚úÖ Depend√™ncias instaladas%NC%
) else (
    echo %RED%‚ùå Arquivo requirements.txt n√£o encontrado!%NC%
    pause
    exit /b 1
)

REM Verificar arquivo .env
if not exist ".env" (
    echo %YELLOW%‚ö†Ô∏è  Arquivo .env n√£o encontrado. Criando...%NC%
    if exist ".env.example" (
        copy ".env.example" ".env" >nul
        echo %YELLOW%üìù Configure o arquivo .env com suas credenciais do PostgreSQL%NC%
    ) else (
        (
            echo PG_NAME=db_elevadores
            echo PG_USER=postgres
            echo PG_PASSWORD=sua_senha_aqui
            echo PG_HOST=localhost
            echo PG_PORT=5432
        ) > .env
        echo %YELLOW%üìù Arquivo .env criado. Configure suas credenciais do PostgreSQL%NC%
    )
)

REM Criar atalho na √°rea de trabalho
echo %YELLOW%üñ•Ô∏è  Criando atalho na √°rea de trabalho...%NC%
set "DESKTOP_PATH=%USERPROFILE%\Desktop"
set "SHORTCUT_PATH=%DESKTOP_PATH%\HomeManager.lnk"
set "TARGET_PATH=%PROJECT_DIR%\installers\windows\homemanager.bat"
set "ICON_PATH=%PROJECT_DIR%\static\images\home.png"

REM Usar PowerShell para criar atalho
powershell -Command "& {$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%SHORTCUT_PATH%'); $Shortcut.TargetPath = '%TARGET_PATH%'; $Shortcut.WorkingDirectory = '%PROJECT_DIR%'; $Shortcut.IconLocation = '%ICON_PATH%'; $Shortcut.Description = 'HomeManager - Sistema de Elevadores'; $Shortcut.Save()}"

if exist "%SHORTCUT_PATH%" (
    echo %GREEN%‚úÖ Atalho criado na √°rea de trabalho%NC%
) else (
    echo %YELLOW%‚ö†Ô∏è  N√£o foi poss√≠vel criar atalho na √°rea de trabalho%NC%
)

REM Criar execut√°vel
echo %YELLOW%‚öôÔ∏è  Criando execut√°vel...%NC%
(
echo @echo off
echo REM HomeManager - Execut√°vel Windows
echo REM Este script inicia o servidor e abre o navegador
echo.
echo setlocal enabledelayedexpansion
echo chcp 65001 ^>nul
echo.
echo REM Cores
echo set "RED=[31m"
echo set "GREEN=[32m"
echo set "YELLOW=[33m"
echo set "BLUE=[34m"
echo set "CYAN=[36m"
echo set "NC=[0m"
echo.
echo REM Obter diret√≥rio do projeto
echo set "SCRIPT_DIR=%%~dp0"
echo for %%%%i in ^("%%SCRIPT_DIR%%.."\) do set "PARENT_DIR=%%%%~fi"
echo for %%%%i in ^("%%PARENT_DIR%%.."\) do set "PROJECT_DIR=%%%%~fi"
echo.
echo cd /d "%%PROJECT_DIR%%"
echo.
echo REM Verificar se ambiente virtual existe
echo if not exist ".venv" ^(
echo     echo %%RED%%‚ùå Ambiente virtual n√£o encontrado!%%NC%%
echo     echo %%YELLOW%%Execute o instalador primeiro: installers\windows\install_homemanager.bat%%NC%%
echo     pause
echo     exit /b 1
echo ^)
echo.
echo REM Ativar ambiente virtual
echo call .venv\Scripts\activate.bat
echo.
echo REM Verificar conex√£o PostgreSQL
echo echo %%BLUE%%üîç Verificando conex√£o com PostgreSQL...%%NC%%
echo python -c "import psycopg2; from postgre import create_pg_connection; create_pg_connection(^)" ^>nul 2^>^&1
echo if %%errorlevel%% neq 0 ^(
echo     echo %%RED%%‚ùå Erro na conex√£o com PostgreSQL!%%NC%%
echo     echo %%YELLOW%%Verifique se:%%NC%%
echo     echo %%YELLOW%%  - PostgreSQL est√° instalado e rodando%%NC%%
echo     echo %%YELLOW%%  - Credenciais no arquivo .env est√£o corretas%%NC%%
echo     echo %%YELLOW%%  - Banco de dados 'db_elevadores' existe%%NC%%
echo     pause
echo     exit /b 1
echo ^)
echo.
echo echo %%GREEN%%‚úÖ Conex√£o com PostgreSQL estabelecida%%NC%%
echo.
echo REM Cabe√ßalho
echo echo.
echo echo ====================================================
echo echo %%BLUE%%üè¢ HomeManager - Sistema de Elevadores%%NC%%
echo echo %%CYAN%%üöÄ Iniciando aplica√ß√£o...%%NC%%
echo echo ====================================================
echo.
echo REM Iniciar servidor
echo echo %%GREEN%%üåê Iniciando servidor...%%NC%%
echo start /b python app.py
echo.
echo REM Aguardar servidor inicializar
echo timeout /t 3 /nobreak ^>nul
echo.
echo REM Abrir navegador
echo echo %%GREEN%%üåê Abrindo HomeManager no navegador...%%NC%%
echo start http://localhost:5000
echo.
echo echo %%GREEN%%‚úÖ HomeManager iniciado com sucesso!%%NC%%
echo echo %%CYAN%%üí° Para encerrar, feche esta janela%%NC%%
echo echo %%YELLOW%%üåê URL: http://localhost:5000%%NC%%
echo.
echo REM Manter janela aberta
echo echo Pressione qualquer tecla para encerrar o HomeManager...
echo pause ^>nul
echo.
echo REM Finalizar processos Python
echo taskkill /f /im python.exe ^>nul 2^>^&1
echo taskkill /f /im pythonw.exe ^>nul 2^>^&1
echo echo %%GREEN%%‚úÖ HomeManager encerrado%%NC%%
) > "%PROJECT_DIR%\installers\windows\homemanager.bat"

echo %GREEN%‚úÖ Execut√°vel criado%NC%

REM Adicionar ao menu iniciar (opcional)
echo %YELLOW%üì± Criando entrada no menu iniciar...%NC%
set "START_MENU=%APPDATA%\Microsoft\Windows\Start Menu\Programs"
if not exist "%START_MENU%" mkdir "%START_MENU%" 2>nul

powershell -Command "& {$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%START_MENU%\HomeManager.lnk'); $Shortcut.TargetPath = '%TARGET_PATH%'; $Shortcut.WorkingDirectory = '%PROJECT_DIR%'; $Shortcut.IconLocation = '%ICON_PATH%'; $Shortcut.Description = 'HomeManager - Sistema de Elevadores'; $Shortcut.Save()}" >nul 2>&1

REM Sucesso
echo.
echo ====================================================
echo %GREEN%üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!%NC%
echo ====================================================
echo %CYAN%üì± O HomeManager foi instalado como aplicativo%NC%
echo %CYAN%üñ•Ô∏è  Atalho criado na √°rea de trabalho%NC%
echo %CYAN%üì± Dispon√≠vel no menu iniciar%NC%
echo %CYAN%üñ±Ô∏è  Ou execute: %TARGET_PATH%%NC%
echo.
echo %YELLOW%‚ö†Ô∏è  IMPORTANTE:%NC%
echo %YELLOW%  - Configure o arquivo .env com suas credenciais do PostgreSQL%NC%
echo %YELLOW%  - Certifique-se de que o PostgreSQL est√° instalado e rodando%NC%
echo %YELLOW%  - Crie o banco de dados 'db_elevadores' se necess√°rio%NC%
echo.
echo %GREEN%‚úÖ Tudo pronto! Bom uso do HomeManager!%NC%
echo.

pause
